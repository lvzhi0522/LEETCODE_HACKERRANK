class Solution:
    
    def loudAndRich(self, richer, quiet):
        
        m = collections.defaultdict(list)        
        for i, j in richer: m[j].append(i)    
        
        res = [-1] * len(quiet)
        def dfs(i):
            if res[i]!=-1: return res[i]
            
            res[i] = i
            for j in m[i]:
                if res[j]==-1:
                    res[j] = dfs(j)
                if quiet[res[j]] < quiet[res[i]]:
                    res[i] = res[j]
            return res[i]              

        for i in range(len(quiet)): dfs(i)
        return res
   
    
#     def loudAndRich(self, richer, quiet):      
#         output = []
#         for i in range(len(quiet)):
#             result = i
#             for j in self.findlarge(richer, i):
#                 if quiet[j] < quiet[result]:
#                     result = j
#             output.append(result)
#         return output
    
#     def findlarge(self, richer, n):
        
#         search = [n]
        
#         for i in search:
#             for j in richer:
#                 if j[-1]==i and j[0] not in search:
#                     search.append(j[0])
#         return search
