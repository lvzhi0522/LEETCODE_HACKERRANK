# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSymmetric(self, root):

        
        
# BFS iteratively

        queue = [root]
        
        while queue:
            
            old_q, queue = queue, []
            
            level = [item.val if item else 'NONE' for item in old_q]
            
            if level != level[::-1]:
                return False
            
            for item in old_q:
                if item:
                    queue.extend([item.left,item.right])
        return True
        

    

    
# recursively

#     def isSymmetric(self, root):
        
#         if not root: return True
        
#         return self.TwoSymmetric(root.left, root.right)
    
#     def TwoSymmetric(self, left, right):
        
#         if not left and not right:
#             return True
#         if (not left and right) or (left and not right):
#             return False
        
#         if left.val == right.val and self.TwoSymmetric(left.left, right.right) and self.TwoSymmetric(left.right, right.left):
#             return True
        
#         return False
